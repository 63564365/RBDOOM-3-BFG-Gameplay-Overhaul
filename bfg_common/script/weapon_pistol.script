/***********************************************************************

weapon_pistol.script

***********************************************************************/

#define PISTOL_FIRERATE			0.2
#define PISTOL_LOWAMMO			4
#define PISTOL_NUMPROJECTILES	1

// blend times
#define PISTOL_IDLE_TO_LOWER	2
#define PISTOL_IDLE_TO_FIRE		1
#define	PISTOL_IDLE_TO_RELOAD	3
#define PISTOL_RAISE_TO_IDLE	3
#define PISTOL_FIRE_TO_IDLE		4
#define PISTOL_RELOAD_TO_IDLE	4

#define PISTOL_BEST_SHOTS		1
#define PISTOL_BEST_SPREAD		0.1
#define PISTOL_NORMAL_SRREAD	0.5

object weapon_pistol : weapon_base {
	float		next_attack;
	float		accurate_shots;
	
	void		init();
	
	void		Lower();
	void		Raise();
	void		Idle();
	void		Fire();
	void		Reload();
	void		ExitCinematic();
};

void weapon_pistol::init() {
	next_attack = 0;
	accurate_shots = PISTOL_BEST_SHOTS;
	weaponState( "Raise", 0 );
}

void weapon_pistol::Raise() {
	weaponRising();
	playAnim( ANIMCHANNEL_ALL, "raise" );
	waitUntil( animDone( ANIMCHANNEL_ALL, PISTOL_RAISE_TO_IDLE ) );
	weaponState( "Idle", PISTOL_RAISE_TO_IDLE );
}

void weapon_pistol::Lower() {
	weaponLowering();
	playAnim( ANIMCHANNEL_ALL, "putaway" );
	waitUntil( animDone( ANIMCHANNEL_ALL, 0 ) );
	weaponHolstered();
	waitUntil( WEAPON_RAISEWEAPON );
	weaponState( "Raise", 0 );
}

void weapon_pistol::Idle() {
	float currentTime;
	
	weaponReady();
	if ( !ammoAvailable() ) {
		playCycle( ANIMCHANNEL_ALL, "idle_empty" );
	} else {
		playCycle( ANIMCHANNEL_ALL, "idle" );
	}
	while( 1 ) {
		if ( WEAPON_LOWERWEAPON ) {
			weaponState( "Lower", PISTOL_IDLE_TO_LOWER );
		}
		currentTime = sys.getTime();
		if ( WEAPON_ATTACK ) {
			if ( ammoAvailable() > 0 ) {
				if ( currentTime >= next_attack ) {
					weaponState( "Fire", PISTOL_IDLE_TO_FIRE );
				}
			} else {
				nextWeapon();
			}
		} else {
			accurate_shots = PISTOL_BEST_SHOTS;
		}
		waitFrame();
	}
}

void weapon_pistol::Fire() {
	float spread;

	next_attack = sys.getTime() + PISTOL_FIRERATE;
	
	if ( ammoAvailable() == PISTOL_LOWAMMO ) {
		startSound( "snd_lowammo", SND_CHANNEL_ITEM, true );
	}

	if ( accurate_shots > 0 ) {
		spread = PISTOL_BEST_SPREAD;
		accurate_shots = accurate_shots - 1;
	} else {
		spread = PISTOL_NORMAL_SRREAD;
	}
	
	launchProjectiles( PISTOL_NUMPROJECTILES, spread, 0, 1.0, 1.0 );
	playAnim( ANIMCHANNEL_ALL, "fire" );
	waitUntil( animDone( ANIMCHANNEL_ALL, PISTOL_FIRE_TO_IDLE ) );
	weaponState( "Idle", PISTOL_FIRE_TO_IDLE );
}

void weapon_pistol::Reload() {
	weaponState( "Idle", PISTOL_RELOAD_TO_IDLE );
}

void weapon_pistol::ExitCinematic() {
	next_attack = 0;
	weaponState( "Idle", 0 );
}
