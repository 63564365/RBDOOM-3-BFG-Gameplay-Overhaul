/***********************************************************************

ai_monster_zombie_security_pistol.script

monster_zombie_sergeant
monster_zsec_shotgun
monster_zsec_p90_helmet
monster_zsec_p90_zombie
monster_zsec_pistol_shield

***********************************************************************/

#define ZSECP_RUNDISTANCE				192
#define ZSECP_WALKTURN					65

#define ZSECP_REPOSITION_MAX_LENGTH		11
#define ZSECP_REPOSITION_MIN_LENGTH		6
#define ZSECP_COVER_MAX_DURATION		5
#define ZSECP_COVER_MIN_DURATION		2

#define ZSECP_CAUTION_COOLDOWN			120
#define ZSECP_ALERT_COOLDOWN			60

#define ATTACK_ZSECP_CROUCHFIRE			ATTACK_SPECIAL1
#define ATTACK_ZSECP_ADVANCE			ATTACK_SPECIAL2
#define ATTACK_ZSECP_RETREAT			ATTACK_SPECIAL3

#define TORSO_RAISEWEAPON "Torso_RaiseWeapon"
#define TORSO_LOWERWEAPON "Torso_LowerWeapon"
#define TORSO_ATTACK "Torso_Attack"
#define LEGS_DODGELEFT "Legs_DodgeLeft"
#define LEGS_DODGERIGHT "Legs_DodgeRight"
#define LEGS_STEPLEFT "Legs_StepLeft"
#define LEGS_STEPRIGHT "Legs_StepRight"

boolean arrayContains( string array, string val ) {
	return arrayFind( array, val ) != -1;
}

object monster_zombie_security_pistol : monster_zombie_base {
	entity		combat_node;

	// voluntary status
	boolean		am_in_cover;
	boolean		am_attacking;
	boolean		am_crouching;
	boolean		weapon_raised;

	// animation control
	string		torso_anim;
	string		legs_anim;

	// threat status
	boolean		enemy_is_around;
	boolean		enemy_in_sight;
	boolean		enemy_is_aiming_at_me;
	boolean		enemy_is_attacking_me;
	float		enemy_last_attacked_time;
	boolean		am_taking_damage;
	vector		last_took_damage_position;
	float		last_took_damage_time;
	vector		enemy_last_seen_from_position;
	vector		enemy_last_known_position;
	float		enemy_last_seen_time;
	float		enemy_last_detected_time;
	boolean		disturbance_exists;
	entity		disturbance_source;
	vector		disturbance_position;
	float		disturbance_time;
	boolean		aim_is_blocked;
	entity		aim_blocked_by;
	boolean		can_hit_enemy;
	boolean		move_is_blocked;
	entity		move_blocked_by;
	boolean		am_blocking_aim;
	boolean		am_blocking_move;
	boolean		can_left_sidestep;
	boolean		can_left_sidestep_into_cover;
	boolean		can_left_sidestep_to_attack;
	boolean		can_left_dodge;
	boolean		can_left_dodge_into_cover;
	boolean		can_left_dodge_to_attack;
	boolean		can_right_sidestep;
	boolean		can_right_sidestep_into_cover;
	boolean		can_right_sidestep_to_attack;
	boolean		can_right_dodge;
	boolean		can_right_dodge_into_cover;
	boolean		can_right_dodge_to_attack;
	float		player_aim_relative;
	float		health_percentage;

	// entity
	void		init();

	// states
	void		state_Begin();
	void		state_Idle();

	// control
	void		begin_update_loop();
	void		update_loop();

	// actions
	void		stand_attack();
	void		combat_retreat();
	void		combat_advance();

	// torso anim states
	void		Torso_Idle();
	void		Torso_Pain();
	void		Torso_Aim();
	void		Torso_Attack();
	void		Torso_RaiseWeapon();
	void		Torso_LowerWeapon();
	
	// legs anim states
	void		Legs_Idle();
	void		Legs_Walk();
	void		Legs_Run();
	void		Legs_DodgeLeft();
	void		Legs_DodgeRight();
	void		Legs_StepLeft();
	void		Legs_StepRight();
};

/***********************************************************************

	Torso animation control

***********************************************************************/

void monster_zombie_security_pistol::Torso_Idle() {
	eachFrame {		
		if ( torso_anim != "" ) {
			sys.println( torso_anim );
			callFunction( torso_anim );
			torso_anim = "";
		}
	}
}

void monster_zombie_security_pistol::Torso_Pain() {
	string animname;

	animname = getPainAnim();
	setBlendFrames( ANIMCHANNEL_TORSO, 2 );
	playAnim( ANIMCHANNEL_TORSO, animname );

	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		waitFrame();
	}
	
	// no pain for 1 second
	preventPain( 1 );
	
	finishAction( "pain" );
	setBlendFrames( ANIMCHANNEL_TORSO, 4 );
}

void monster_zombie_security_pistol::Torso_Stand() {
	idleAnim( ANIMCHANNEL_TORSO, "stand" );
}

void monster_zombie_security_pistol::Torso_Aim() {
	playCycle( ANIMCHANNEL_TORSO, "range_attack_aim" );
}

void monster_zombie_security_pistol::Torso_Attack() {
	playAnim( ANIMCHANNEL_TORSO, "range_attack_loop" );
	while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
}

void monster_zombie_security_pistol::Torso_RaiseWeapon() {
	playAnim( ANIMCHANNEL_TORSO, "range_attack" );
	while( !animDone( ANIMCHANNEL_TORSO, 0 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	playCycle( ANIMCHANNEL_TORSO, "range_attack_aim" );
}

void monster_zombie_security_pistol::Torso_LowerWeapon() {
	playAnim( ANIMCHANNEL_TORSO, "range_attack_end" );
	while( !animDone( ANIMCHANNEL_TORSO, 4 ) ) {
		if ( AI_PAIN ) {
			Torso_Pain();
		}
		waitFrame();
	}
	idleAnim( ANIMCHANNEL_TORSO, "stand" );
}

/***********************************************************************

	Legs animation control

***********************************************************************/

void monster_zombie_security_pistol::Legs_Idle() {
	idleAnim( ANIMCHANNEL_LEGS, "stand" );

	eachFrame {
		if ( getEnemy() ) {
			run = true;
		}
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 8 ); }
		if ( AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 8 ); }
		
		if ( legs_anim != "" ) {
			sys.println( legs_anim );
			callFunction( legs_anim );
			legs_anim = "";
		}
	}
}

void monster_zombie_security_pistol::Legs_Stand() {
	idleAnim( ANIMCHANNEL_LEGS, "stand" );
}

void monster_zombie_security_pistol::Legs_Walk() {
	if ( fast ) {
		playCycle( ANIMCHANNEL_LEGS, "fast_walk" );
	} else {
		playCycle( ANIMCHANNEL_LEGS, "walk" );
	}
	
	eachFrame {
		if ( getEnemy() ) {
			run = true;
		}
		if ( run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Run", 8 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 ); }
	}
}

void monster_zombie_security_pistol::Legs_Run() {
	if ( fast ) {
		playCycle( ANIMCHANNEL_LEGS, "fast_run" );
	} else {
		playCycle( ANIMCHANNEL_LEGS, "run" );
	}	
	eachFrame {
		if ( getEnemy() ) {
			run = true;
		}
		if ( !run && AI_FORWARD )	{ animState( ANIMCHANNEL_LEGS, "Legs_Walk", 8 ); }
		if ( !AI_FORWARD )			{ animState( ANIMCHANNEL_LEGS, "Legs_Idle", 8 ); }
	}
}

void monster_zombie_security_pistol::Legs_DodgeLeft() {
	playAnim( ANIMCHANNEL_LEGS, "evade_left" );

	while( !animDone( ANIMCHANNEL_LEGS, 8 ) ) {
		waitFrame();
	}
	
	finishAction( "strafe" );
}

void monster_zombie_security_pistol::Legs_DodgeRight() {
	playAnim( ANIMCHANNEL_LEGS, "evade_right" );

	while( !animDone( ANIMCHANNEL_LEGS, 8 ) ) {
		waitFrame();
	}

	finishAction( "strafe" );
}

void monster_zombie_security_pistol::Legs_StepLeft() {
	playAnim( ANIMCHANNEL_LEGS, "step_left" );

	while( !animDone( ANIMCHANNEL_LEGS, 4 ) ) {
		waitFrame();
	}
	
	finishAction( "sidestep" );
}

void monster_zombie_security_pistol::Legs_StepRight() {
	playAnim( ANIMCHANNEL_LEGS, "step_right" );

	while( !animDone( ANIMCHANNEL_LEGS, 4 ) ) {
		waitFrame();
	}

	finishAction( "sidestep" );
}

/***********************************************************************

	AI

***********************************************************************/

/*
=====================
monster_zombie_security_pistol::init
=====================
*/
void monster_zombie_security_pistol::init() {
	run_distance	= ZSECP_RUNDISTANCE;
	walk_turn		= ZSECP_WALKTURN;
	enemy_last_known_position = getOrigin();

	begin_update_loop();

	setState( "state_Begin" );
}

/***********************************************************************

	States

***********************************************************************/

/*
=====================
monster_zombie_security_pistol::state_Begin
=====================
*/
void monster_zombie_security_pistol::state_Begin() {
	animState( ANIMCHANNEL_TORSO, "Torso_Idle", 0 );
	animState( ANIMCHANNEL_LEGS, "Legs_Idle", 0 );

	monster_begin();
	setMoveType( MOVETYPE_ANIM );	
	setState( "state_Idle" );
}

/*
=====================
monster_zombie_security_pistol::state_Idle
===================== 
*/
void monster_zombie_security_pistol::state_Idle() {
	wait_for_enemy();
	setState( "state_Combat" );
}

/***********************************************************************

	attacks

***********************************************************************/

/*
=====================
monster_zombie_security_pistol::stand_attack
=====================
*/
void monster_zombie_security_pistol::stand_attack() {
	float currentTime;
	boolean enterCover;
	boolean exitCover;
	string torsoAnim;
	string legsAnim;

	while ( true ) {
		torsoAnim = "";
		legsAnim = "";
		
		currentTime = sys.getTime();
		if ( sys.influenceActive() ) {
			break;
		}

		if ( enemy_is_attacking_me ) {
			enterCover = can_left_sidestep_into_cover || can_left_dodge_into_cover || can_right_sidestep_into_cover || can_right_dodge_into_cover;
			if ( enterCover ) {
				if ( can_left_sidestep_into_cover ) {
					legsAnim = LEGS_STEPLEFT;
				} else if ( can_right_sidestep_into_cover ) {
					legsAnim = LEGS_STEPRIGHT;
				} else if ( can_left_dodge_into_cover ) {
					legsAnim = LEGS_DODGELEFT;
				} else if ( can_right_dodge_into_cover ) {
					legsAnim = LEGS_DODGERIGHT;
				}
				am_in_cover = true;
			} else if ( getEnemy() == $player1 ) {
				if ( player_aim_relative > 0 ) {
					if ( can_left_dodge ) {
						legsAnim = LEGS_DODGELEFT;
					} else if ( can_left_sidestep ) {
						legsAnim = LEGS_STEPLEFT;
					}
				} else {
					if ( can_right_dodge ) {
						legsAnim = LEGS_DODGERIGHT;
					} else if ( can_right_sidestep ) {
						legsAnim = LEGS_STEPRIGHT;
					}
				}
			}
		} else if ( can_hit_enemy ) {
			lookAtEnemy( 1 );
			if ( !weapon_raised ) {
				torsoAnim = TORSO_RAISEWEAPON;
			} else {
				torsoAnim = TORSO_ATTACK;
			}
		} else {
			exitCover = can_left_sidestep_to_attack || can_right_sidestep_to_attack || can_left_dodge_to_attack || can_right_dodge_to_attack;
			if ( exitCover ) {
				if ( can_left_sidestep_to_attack ) {
					legsAnim = LEGS_STEPLEFT;
				} else if ( can_right_sidestep_to_attack ) {
					legsAnim = LEGS_STEPRIGHT;
				} else if ( can_left_dodge_to_attack ) {
					legsAnim = LEGS_DODGELEFT;
				} else if ( can_right_dodge_to_attack ) {
					legsAnim = LEGS_DODGERIGHT;
				} else {
					am_in_cover = false;
					if ( weapon_raised ) {
						torsoAnim = TORSO_LOWERWEAPON;
					}
				}
			}
		}

		if ( torso_anim == "" ) {
			if ( torsoAnim == TORSO_RAISEWEAPON ) {
				weapon_raised = true;
			} else if ( torsoAnim == TORSO_LOWERWEAPON ) {
				weapon_raised = true;
			} else if ( torsoAnim == TORSO_ATTACK ) {
				faceEnemy();
			}
			torso_anim = torsoAnim;
		}

		if ( legs_anim == "" ) {
			legs_anim = legsAnim;
		}

		lookAtEnemy( 1 );
		waitFrame();
	}
}

/*
=====================
monster_zombie_security_pistol::state_Combat
=====================
*/
void monster_zombie_security_pistol::state_Combat() {
	entity combat_node;

	eachFrame {
		stand_attack();
		waitFrame();
		continue;

		faceEnemy();
		if ( enemy_in_sight ) {
			lookAtEnemy( 1 );
		}

		if ( sys.influenceActive() ) {
			waitFrame();
			continue;
		}

		if ( AI_ENEMY_DEAD ) {
			enemy_dead();
		}
				
		combat_node = getCombatNode();
		if ( combat_node ) {
			combat_ainode( combat_node );
		}
	
		if ( can_hit_enemy ) {
			stand_attack();
		}

		waitFrame();
	}
}

/*
=====================
monster_zombie_security_pistol::combat_retreat
=====================
*/
void monster_zombie_security_pistol::combat_retreat() {
	float cutoffTime;
	float currentTime;

	cutoffTime = RandomDelay( ZSECP_REPOSITION_MIN_LENGTH, ZSECP_REPOSITION_MAX_LENGTH );
	moveToCover();
	if ( AI_DEST_UNREACHABLE || AI_BLOCKED || AI_OBSTACLE_IN_PATH || AI_MOVE_DONE ) {
		moveOutOfRange( getEnemy(), enemyRange() + 500 );
	}
	if ( AI_DEST_UNREACHABLE || AI_BLOCKED || AI_OBSTACLE_IN_PATH || AI_MOVE_DONE ) {
		moveToEntity( randomPath() );
	}
	if ( AI_DEST_UNREACHABLE || AI_BLOCKED || AI_OBSTACLE_IN_PATH || AI_MOVE_DONE ) {
		cutoffTime = RandomDelay( ZSECP_REPOSITION_MIN_LENGTH / 2, ZSECP_REPOSITION_MAX_LENGTH / 2 );
		wander();
	}
	while ( enemy_is_around ) {
		currentTime = sys.getTime();
		if ( AI_DEST_UNREACHABLE || AI_BLOCKED || AI_OBSTACLE_IN_PATH || AI_MOVE_DONE ) {
			break;
		}
		if ( enemy_in_sight ) {
			run = true;
			if ( currentTime > cutoffTime ) {
				break;
			}
		} else {
			if ( currentTime > enemy_last_seen_time + 2 ) {
				run = false;
				break;
			}
		}
		waitFrame();
	}
}

/*
=====================
monster_zombie_security_pistol::combat_advance
=====================
*/
void monster_zombie_security_pistol::combat_advance() {
	boolean doRun;
	float delta;
	entity currentDisturbance;

	if ( !enemy_in_sight ) {
		doRun = true;
	} else {
		doRun = false;
	}

	moveToEnemy();
	if ( AI_MOVE_DONE ) {
		if ( disturbance_exists && ( disturbance_time > enemy_last_seen_time ) ) {
			currentDisturbance = disturbance_source;
			moveToPosition( disturbance_position );
		} else {
			moveToPosition( enemy_last_known_position );
		}
	}
	while ( !AI_MOVE_DONE ) {
		if ( disturbance_exists && ( disturbance_time > enemy_last_seen_time ) ) {
			if ( disturbance_source != $null_entity && ( disturbance_source != currentDisturbance ) ) {
				currentDisturbance = disturbance_source;
				moveToPosition( disturbance_position );
			}
		}

		if ( !enemy_in_sight ) {
			doRun = true;
		} else {
			doRun = false;
		}

		delta = getTurnDelta();
		if ( ( delta > walk_turn ) || ( delta < -walk_turn ) ) {
			run = false;
		} else {
			run = doRun;
		}

		if ( can_hit_enemy ) {
			break;
		}

		waitFrame();
	}
	stopMove();
	faceEnemy();
}

void monster_zombie_security_pistol::begin_update_loop() {
	thread update_loop();
}

void monster_zombie_security_pistol::update_loop() {
	float currentTime;
	entity enemy;
	entity ent;
	player_base player;
	vector myPosition;
	boolean canSeeEnemyAimingAtMe;
	boolean amTakingDamage;
	boolean enemyPlayerFiring;
	boolean amBlockingAim;
	boolean amBlockingMove;
	boolean enemyIsAttackingSquad;
	boolean enemyIsAroundSquad;
	float livingSquadCount;
	float lastSquadUpdate;
	vector pos;
	vector dir;
	vector target;
	float initialHealth;

	initialHealth = getFloatKey( "health" );

	while ( !AI_DEAD ) {
		currentTime = sys.getTime();
		enemy = getEnemy();
		myPosition = getOrigin();
		amTakingDamage = AI_DAMAGE;
		AI_DAMAGE = false;

		// enemy_in_sight
		// enemy_last_known_position
		// enemy_last_seen_time
		// enemy_last_seen_from_position
		if ( AI_ENEMY_IN_FOV ) {
			enemy_in_sight = true;
			enemy_last_seen_from_position = myPosition;
			enemy_last_known_position = enemy.getOrigin();
			enemy_last_seen_time = currentTime;
			can_hit_enemy = canHitEnemyFromAnim( "range_attack_loop" );
		} else {
			enemy_in_sight = false;
			can_hit_enemy = false;
		}

		// enemy_is_aiming_at_me
		enemyPlayerFiring = false;
		canSeeEnemyAimingAtMe = false;
		if ( enemy_in_sight && enemy == $player1 ) {
			player = $player1;
			if ( player.TraceView( 1000 ) == self ) {
				canSeeEnemyAimingAtMe = true;
			}
			if ( player.AI_WEAPON_FIRED || player.AI_ATTACK_HELD ) {
				enemyPlayerFiring = true;
			}
		}
		if ( canSeeEnemyAimingAtMe || amTakingDamage ) {
			enemy_is_aiming_at_me = true;
		} else {
			enemy_is_aiming_at_me = false;
		}

		// am_taking_damage
		// last_took_damage_time
		// last_took_damage_position
		if ( amTakingDamage ) {
			am_taking_damage = true;
			last_took_damage_time = currentTime;
			last_took_damage_position = myPosition;
		} else if ( am_taking_damage && ( currentTime > last_took_damage_time + 2 ) ) {
			am_taking_damage = false;
		}

		// enemy_is_attacking_me
		if ( amTakingDamage || ( canSeeEnemyAimingAtMe && enemyPlayerFiring ) ) {
			enemy_is_attacking_me = true;
			enemy_last_attacked_time = currentTime;
		} else if ( enemy_is_attacking_me && ( currentTime > enemy_last_attacked_time + 2 ) ) {
			enemy_is_attacking_me = false;
		}

		// disturbance_exists
		// disturbance_source
		// disturbance_position
		// disturbance_time
		ent = heardSound( false );
		if ( ent != $null_entity && ent != self ) {
			disturbance_exists = true;
			disturbance_source = ent;
			disturbance_position = ent.getOrigin();
			disturbance_time = currentTime;
		} else if ( disturbance_exists ) {
			if ( canSee( disturbance_source ) || ( currentTime > disturbance_time + ZSECP_CAUTION_COOLDOWN ) ) {
				disturbance_exists = false;
			}
		}

		// aim_is_blocked
		// aim_blocked_by
		if ( enemy_in_sight ) {
			pos = getOrigin() + '0 0 48';
			target = enemy.getOrigin() + '0 0 48';
			sys.trace( pos, target, '-8 -8 0', '8 8 16', MASK_ALL, self );
			ent = sys.getTraceEntity();
			if ( ent == enemy ) {
				aim_is_blocked = false;
				aim_blocked_by = $null_entity;
			} else {
				aim_is_blocked = true;
				aim_blocked_by = ent;
			}
		}

		// move_is_blocked
		// move_blocked_by
		if ( !AI_MOVE_DONE ) {
			ent = getObstacle();
			if ( ent != $null_entity ) {
				move_is_blocked = true;
				move_blocked_by = ent;
			} else {
				move_is_blocked = false;
			}
		}

		// player_aim_relative
		if ( ( enemy == $player1 ) && canSeeEnemyAimingAtMe ) {
			player = $player1;
			target = player.getOrigin() + '0 0 48';
			pos = getOrigin() + '0 0 48';
			dir = pos - target;
			player_aim_relative = sys.DotProduct( dir, sys.angToRight( player.getViewAngles() ) );
		}

		// sidestep / dodge shared properties
		pos = getOrigin() + '0 0 48';
		target = enemy.getOrigin() + '0 0 48';

		// sidestep distance
		dir = sys.angToRight( getAngles() ) * 40;

		// can_right_sidestep_to_attack
		// can_right_sidestep_into_cover
		if ( testAnimMove( "step_right" ) ) {
			can_right_sidestep = true;
			sys.trace( pos + dir, target, '0 0 0', '0 0 0', MASK_PLAYERSOLID, self );
			if ( sys.getTraceEntity() == enemy ) {
				can_right_sidestep_to_attack = true;
				can_right_sidestep_into_cover = false;
			} else {
				can_right_sidestep_to_attack = false;
				can_right_sidestep_into_cover = true;
			}
		} else {
			can_right_sidestep = false;
			can_right_sidestep_to_attack = false;
			can_right_sidestep_into_cover = false;
		}

		// can_left_sidestep_to_attack
		// can_left_sidestep_into_cover
		if ( testAnimMove( "step_left" ) ) {
			can_left_sidestep = true;
			sys.trace( pos - dir, target, '0 0 0', '0 0 0', MASK_PLAYERSOLID, self );
			if ( sys.getTraceEntity() == enemy ) {
				can_left_sidestep_to_attack = true;
				can_left_sidestep_into_cover = false;
			} else {
				can_left_sidestep_to_attack = false;
				can_left_sidestep_into_cover = true;
			}
		} else {
			can_left_sidestep = false;
			can_left_sidestep_to_attack = false;
			can_left_sidestep_into_cover = false;
		}

		// dodge distance
		dir *= 3;

		// can_right_dodge_to_attack
		// can_right_dodge_into_cover
		if ( testAnimMove( "evade_right" ) ) {
			can_right_dodge = true;
			sys.trace( pos + dir, target, '0 0 0', '0 0 0', MASK_PLAYERSOLID, self );
			if ( sys.getTraceEntity() == enemy ) {
				can_right_dodge_to_attack = true;
				can_right_dodge_into_cover = false;
			} else {
				can_right_dodge_to_attack = false;
				can_right_dodge_into_cover = true;
			}
		} else {
			can_right_dodge = false;
			can_right_dodge_to_attack = false;
			can_right_dodge_into_cover = false;
		}

		// can_left_dodge_to_attack
		// can_left_dodge_into_cover
		if ( testAnimMove( "evade_left" ) ) {
			can_left_dodge = true;
			sys.trace( pos - dir, target, '0 0 0', '0 0 0', MASK_PLAYERSOLID, self );
			if ( sys.getTraceEntity() == enemy ) {
				can_left_dodge_to_attack = true;
				can_left_dodge_into_cover = false;
			} else {
				can_left_dodge_to_attack = false;
				can_left_dodge_into_cover = true;
			}
		} else {
			can_left_dodge = false;
			can_left_dodge_to_attack = false;
			can_left_dodge_into_cover = false;
		}

		// enemy_is_around
		if ( enemy_in_sight || enemy_is_attacking_me || enemyIsAroundSquad ) {
			enemy_is_around = true;
			enemy_last_detected_time = currentTime;
		} else if ( enemy_is_around && ( currentTime > enemy_last_detected_time + ZSECP_ALERT_COOLDOWN ) ) {
			enemy_is_around = false;
		}

		//health_percentage
		health_percentage = getHealth() / initialHealth;

		waitFrame();
	}
}